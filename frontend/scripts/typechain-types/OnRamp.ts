/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EVM2EVMOnRamp {
  export type StaticConfigStruct = {
    linkToken: AddressLike;
    chainSelector: BigNumberish;
    destChainSelector: BigNumberish;
    defaultTxGasLimit: BigNumberish;
    maxNopFeesJuels: BigNumberish;
    prevOnRamp: AddressLike;
    rmnProxy: AddressLike;
    tokenAdminRegistry: AddressLike;
  };

  export type StaticConfigStructOutput = [
    linkToken: string,
    chainSelector: bigint,
    destChainSelector: bigint,
    defaultTxGasLimit: bigint,
    maxNopFeesJuels: bigint,
    prevOnRamp: string,
    rmnProxy: string,
    tokenAdminRegistry: string
  ] & {
    linkToken: string;
    chainSelector: bigint;
    destChainSelector: bigint;
    defaultTxGasLimit: bigint;
    maxNopFeesJuels: bigint;
    prevOnRamp: string;
    rmnProxy: string;
    tokenAdminRegistry: string;
  };

  export type DynamicConfigStruct = {
    router: AddressLike;
    maxNumberOfTokensPerMsg: BigNumberish;
    destGasOverhead: BigNumberish;
    destGasPerPayloadByte: BigNumberish;
    destDataAvailabilityOverheadGas: BigNumberish;
    destGasPerDataAvailabilityByte: BigNumberish;
    destDataAvailabilityMultiplierBps: BigNumberish;
    priceRegistry: AddressLike;
    maxDataBytes: BigNumberish;
    maxPerMsgGasLimit: BigNumberish;
    defaultTokenFeeUSDCents: BigNumberish;
    defaultTokenDestGasOverhead: BigNumberish;
    enforceOutOfOrder: boolean;
  };

  export type DynamicConfigStructOutput = [
    router: string,
    maxNumberOfTokensPerMsg: bigint,
    destGasOverhead: bigint,
    destGasPerPayloadByte: bigint,
    destDataAvailabilityOverheadGas: bigint,
    destGasPerDataAvailabilityByte: bigint,
    destDataAvailabilityMultiplierBps: bigint,
    priceRegistry: string,
    maxDataBytes: bigint,
    maxPerMsgGasLimit: bigint,
    defaultTokenFeeUSDCents: bigint,
    defaultTokenDestGasOverhead: bigint,
    enforceOutOfOrder: boolean
  ] & {
    router: string;
    maxNumberOfTokensPerMsg: bigint;
    destGasOverhead: bigint;
    destGasPerPayloadByte: bigint;
    destDataAvailabilityOverheadGas: bigint;
    destGasPerDataAvailabilityByte: bigint;
    destDataAvailabilityMultiplierBps: bigint;
    priceRegistry: string;
    maxDataBytes: bigint;
    maxPerMsgGasLimit: bigint;
    defaultTokenFeeUSDCents: bigint;
    defaultTokenDestGasOverhead: bigint;
    enforceOutOfOrder: boolean;
  };

  export type FeeTokenConfigArgsStruct = {
    token: AddressLike;
    networkFeeUSDCents: BigNumberish;
    gasMultiplierWeiPerEth: BigNumberish;
    premiumMultiplierWeiPerEth: BigNumberish;
    enabled: boolean;
  };

  export type FeeTokenConfigArgsStructOutput = [
    token: string,
    networkFeeUSDCents: bigint,
    gasMultiplierWeiPerEth: bigint,
    premiumMultiplierWeiPerEth: bigint,
    enabled: boolean
  ] & {
    token: string;
    networkFeeUSDCents: bigint;
    gasMultiplierWeiPerEth: bigint;
    premiumMultiplierWeiPerEth: bigint;
    enabled: boolean;
  };

  export type TokenTransferFeeConfigArgsStruct = {
    token: AddressLike;
    minFeeUSDCents: BigNumberish;
    maxFeeUSDCents: BigNumberish;
    deciBps: BigNumberish;
    destGasOverhead: BigNumberish;
    destBytesOverhead: BigNumberish;
    aggregateRateLimitEnabled: boolean;
  };

  export type TokenTransferFeeConfigArgsStructOutput = [
    token: string,
    minFeeUSDCents: bigint,
    maxFeeUSDCents: bigint,
    deciBps: bigint,
    destGasOverhead: bigint,
    destBytesOverhead: bigint,
    aggregateRateLimitEnabled: boolean
  ] & {
    token: string;
    minFeeUSDCents: bigint;
    maxFeeUSDCents: bigint;
    deciBps: bigint;
    destGasOverhead: bigint;
    destBytesOverhead: bigint;
    aggregateRateLimitEnabled: boolean;
  };

  export type NopAndWeightStruct = { nop: AddressLike; weight: BigNumberish };

  export type NopAndWeightStructOutput = [nop: string, weight: bigint] & {
    nop: string;
    weight: bigint;
  };

  export type FeeTokenConfigStruct = {
    networkFeeUSDCents: BigNumberish;
    gasMultiplierWeiPerEth: BigNumberish;
    premiumMultiplierWeiPerEth: BigNumberish;
    enabled: boolean;
  };

  export type FeeTokenConfigStructOutput = [
    networkFeeUSDCents: bigint,
    gasMultiplierWeiPerEth: bigint,
    premiumMultiplierWeiPerEth: bigint,
    enabled: boolean
  ] & {
    networkFeeUSDCents: bigint;
    gasMultiplierWeiPerEth: bigint;
    premiumMultiplierWeiPerEth: bigint;
    enabled: boolean;
  };

  export type TokenTransferFeeConfigStruct = {
    minFeeUSDCents: BigNumberish;
    maxFeeUSDCents: BigNumberish;
    deciBps: BigNumberish;
    destGasOverhead: BigNumberish;
    destBytesOverhead: BigNumberish;
    aggregateRateLimitEnabled: boolean;
    isEnabled: boolean;
  };

  export type TokenTransferFeeConfigStructOutput = [
    minFeeUSDCents: bigint,
    maxFeeUSDCents: bigint,
    deciBps: bigint,
    destGasOverhead: bigint,
    destBytesOverhead: bigint,
    aggregateRateLimitEnabled: boolean,
    isEnabled: boolean
  ] & {
    minFeeUSDCents: bigint;
    maxFeeUSDCents: bigint;
    deciBps: bigint;
    destGasOverhead: bigint;
    destBytesOverhead: bigint;
    aggregateRateLimitEnabled: boolean;
    isEnabled: boolean;
  };
}

export declare namespace RateLimiter {
  export type ConfigStruct = {
    isEnabled: boolean;
    capacity: BigNumberish;
    rate: BigNumberish;
  };

  export type ConfigStructOutput = [
    isEnabled: boolean,
    capacity: bigint,
    rate: bigint
  ] & { isEnabled: boolean; capacity: bigint; rate: bigint };

  export type TokenBucketStruct = {
    tokens: BigNumberish;
    lastUpdated: BigNumberish;
    isEnabled: boolean;
    capacity: BigNumberish;
    rate: BigNumberish;
  };

  export type TokenBucketStructOutput = [
    tokens: bigint,
    lastUpdated: bigint,
    isEnabled: boolean,
    capacity: bigint,
    rate: bigint
  ] & {
    tokens: bigint;
    lastUpdated: bigint;
    isEnabled: boolean;
    capacity: bigint;
    rate: bigint;
  };
}

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type EVM2AnyMessageStruct = {
    receiver: BytesLike;
    data: BytesLike;
    tokenAmounts: Client.EVMTokenAmountStruct[];
    feeToken: AddressLike;
    extraArgs: BytesLike;
  };

  export type EVM2AnyMessageStructOutput = [
    receiver: string,
    data: string,
    tokenAmounts: Client.EVMTokenAmountStructOutput[],
    feeToken: string,
    extraArgs: string
  ] & {
    receiver: string;
    data: string;
    tokenAmounts: Client.EVMTokenAmountStructOutput[];
    feeToken: string;
    extraArgs: string;
  };
}

export declare namespace Internal {
  export type EVM2EVMMessageStruct = {
    sourceChainSelector: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    sequenceNumber: BigNumberish;
    gasLimit: BigNumberish;
    strict: boolean;
    nonce: BigNumberish;
    feeToken: AddressLike;
    feeTokenAmount: BigNumberish;
    data: BytesLike;
    tokenAmounts: Client.EVMTokenAmountStruct[];
    sourceTokenData: BytesLike[];
    messageId: BytesLike;
  };

  export type EVM2EVMMessageStructOutput = [
    sourceChainSelector: bigint,
    sender: string,
    receiver: string,
    sequenceNumber: bigint,
    gasLimit: bigint,
    strict: boolean,
    nonce: bigint,
    feeToken: string,
    feeTokenAmount: bigint,
    data: string,
    tokenAmounts: Client.EVMTokenAmountStructOutput[],
    sourceTokenData: string[],
    messageId: string
  ] & {
    sourceChainSelector: bigint;
    sender: string;
    receiver: string;
    sequenceNumber: bigint;
    gasLimit: bigint;
    strict: boolean;
    nonce: bigint;
    feeToken: string;
    feeTokenAmount: bigint;
    data: string;
    tokenAmounts: Client.EVMTokenAmountStructOutput[];
    sourceTokenData: string[];
    messageId: string;
  };
}

export interface OnRampInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "currentRateLimiterState"
      | "forwardFromRouter"
      | "getDynamicConfig"
      | "getExpectedNextSequenceNumber"
      | "getFee"
      | "getFeeTokenConfig"
      | "getNopFeesJuels"
      | "getNops"
      | "getPoolBySourceToken"
      | "getSenderNonce"
      | "getStaticConfig"
      | "getSupportedTokens"
      | "getTokenLimitAdmin"
      | "getTokenTransferFeeConfig"
      | "linkAvailableForPayment"
      | "owner"
      | "payNops"
      | "setAdmin"
      | "setDynamicConfig"
      | "setFeeTokenConfig"
      | "setNops"
      | "setRateLimiterConfig"
      | "setTokenTransferFeeConfig"
      | "transferOwnership"
      | "typeAndVersion"
      | "withdrawNonLinkFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSet"
      | "CCIPSendRequested"
      | "ConfigChanged"
      | "ConfigSet"
      | "FeeConfigSet"
      | "NopPaid"
      | "NopsSet"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "TokenTransferFeeConfigDeleted"
      | "TokenTransferFeeConfigSet"
      | "TokensConsumed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRateLimiterState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwardFromRouter",
    values: [
      BigNumberish,
      Client.EVM2AnyMessageStruct,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedNextSequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, Client.EVM2AnyMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTokenConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNopFeesJuels",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNops", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolBySourceToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenLimitAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTransferFeeConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAvailableForPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payNops", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDynamicConfig",
    values: [EVM2EVMOnRamp.DynamicConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTokenConfig",
    values: [EVM2EVMOnRamp.FeeTokenConfigArgsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNops",
    values: [EVM2EVMOnRamp.NopAndWeightStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateLimiterConfig",
    values: [RateLimiter.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTransferFeeConfig",
    values: [EVM2EVMOnRamp.TokenTransferFeeConfigArgsStruct[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNonLinkFees",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRateLimiterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardFromRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedNextSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNopFeesJuels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBySourceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenLimitAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTransferFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAvailableForPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payNops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRateLimiterConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTransferFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNonLinkFees",
    data: BytesLike
  ): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CCIPSendRequestedEvent {
  export type InputTuple = [message: Internal.EVM2EVMMessageStruct];
  export type OutputTuple = [message: Internal.EVM2EVMMessageStructOutput];
  export interface OutputObject {
    message: Internal.EVM2EVMMessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigChangedEvent {
  export type InputTuple = [config: RateLimiter.ConfigStruct];
  export type OutputTuple = [config: RateLimiter.ConfigStructOutput];
  export interface OutputObject {
    config: RateLimiter.ConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    staticConfig: EVM2EVMOnRamp.StaticConfigStruct,
    dynamicConfig: EVM2EVMOnRamp.DynamicConfigStruct
  ];
  export type OutputTuple = [
    staticConfig: EVM2EVMOnRamp.StaticConfigStructOutput,
    dynamicConfig: EVM2EVMOnRamp.DynamicConfigStructOutput
  ];
  export interface OutputObject {
    staticConfig: EVM2EVMOnRamp.StaticConfigStructOutput;
    dynamicConfig: EVM2EVMOnRamp.DynamicConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeConfigSetEvent {
  export type InputTuple = [
    feeConfig: EVM2EVMOnRamp.FeeTokenConfigArgsStruct[]
  ];
  export type OutputTuple = [
    feeConfig: EVM2EVMOnRamp.FeeTokenConfigArgsStructOutput[]
  ];
  export interface OutputObject {
    feeConfig: EVM2EVMOnRamp.FeeTokenConfigArgsStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NopPaidEvent {
  export type InputTuple = [nop: AddressLike, amount: BigNumberish];
  export type OutputTuple = [nop: string, amount: bigint];
  export interface OutputObject {
    nop: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NopsSetEvent {
  export type InputTuple = [
    nopWeightsTotal: BigNumberish,
    nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStruct[]
  ];
  export type OutputTuple = [
    nopWeightsTotal: bigint,
    nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStructOutput[]
  ];
  export interface OutputObject {
    nopWeightsTotal: bigint;
    nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferFeeConfigDeletedEvent {
  export type InputTuple = [tokens: AddressLike[]];
  export type OutputTuple = [tokens: string[]];
  export interface OutputObject {
    tokens: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTransferFeeConfigSetEvent {
  export type InputTuple = [
    transferFeeConfig: EVM2EVMOnRamp.TokenTransferFeeConfigArgsStruct[]
  ];
  export type OutputTuple = [
    transferFeeConfig: EVM2EVMOnRamp.TokenTransferFeeConfigArgsStructOutput[]
  ];
  export interface OutputObject {
    transferFeeConfig: EVM2EVMOnRamp.TokenTransferFeeConfigArgsStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensConsumedEvent {
  export type InputTuple = [tokens: BigNumberish];
  export type OutputTuple = [tokens: bigint];
  export interface OutputObject {
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OnRamp extends BaseContract {
  connect(runner?: ContractRunner | null): OnRamp;
  waitForDeployment(): Promise<this>;

  interface: OnRampInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  currentRateLimiterState: TypedContractMethod<
    [],
    [RateLimiter.TokenBucketStructOutput],
    "view"
  >;

  forwardFromRouter: TypedContractMethod<
    [
      destChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct,
      feeTokenAmount: BigNumberish,
      originalSender: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  getDynamicConfig: TypedContractMethod<
    [],
    [EVM2EVMOnRamp.DynamicConfigStructOutput],
    "view"
  >;

  getExpectedNextSequenceNumber: TypedContractMethod<[], [bigint], "view">;

  getFee: TypedContractMethod<
    [destChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct],
    [bigint],
    "view"
  >;

  getFeeTokenConfig: TypedContractMethod<
    [token: AddressLike],
    [EVM2EVMOnRamp.FeeTokenConfigStructOutput],
    "view"
  >;

  getNopFeesJuels: TypedContractMethod<[], [bigint], "view">;

  getNops: TypedContractMethod<
    [],
    [
      [EVM2EVMOnRamp.NopAndWeightStructOutput[], bigint] & {
        nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStructOutput[];
        weightsTotal: bigint;
      }
    ],
    "view"
  >;

  getPoolBySourceToken: TypedContractMethod<
    [arg0: BigNumberish, sourceToken: AddressLike],
    [string],
    "view"
  >;

  getSenderNonce: TypedContractMethod<[sender: AddressLike], [bigint], "view">;

  getStaticConfig: TypedContractMethod<
    [],
    [EVM2EVMOnRamp.StaticConfigStructOutput],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [string[]],
    "view"
  >;

  getTokenLimitAdmin: TypedContractMethod<[], [string], "view">;

  getTokenTransferFeeConfig: TypedContractMethod<
    [token: AddressLike],
    [EVM2EVMOnRamp.TokenTransferFeeConfigStructOutput],
    "view"
  >;

  linkAvailableForPayment: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payNops: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  setDynamicConfig: TypedContractMethod<
    [dynamicConfig: EVM2EVMOnRamp.DynamicConfigStruct],
    [void],
    "nonpayable"
  >;

  setFeeTokenConfig: TypedContractMethod<
    [feeTokenConfigArgs: EVM2EVMOnRamp.FeeTokenConfigArgsStruct[]],
    [void],
    "nonpayable"
  >;

  setNops: TypedContractMethod<
    [nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStruct[]],
    [void],
    "nonpayable"
  >;

  setRateLimiterConfig: TypedContractMethod<
    [config: RateLimiter.ConfigStruct],
    [void],
    "nonpayable"
  >;

  setTokenTransferFeeConfig: TypedContractMethod<
    [
      tokenTransferFeeConfigArgs: EVM2EVMOnRamp.TokenTransferFeeConfigArgsStruct[],
      tokensToUseDefaultFeeConfigs: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  withdrawNonLinkFees: TypedContractMethod<
    [feeToken: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentRateLimiterState"
  ): TypedContractMethod<[], [RateLimiter.TokenBucketStructOutput], "view">;
  getFunction(
    nameOrSignature: "forwardFromRouter"
  ): TypedContractMethod<
    [
      destChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct,
      feeTokenAmount: BigNumberish,
      originalSender: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDynamicConfig"
  ): TypedContractMethod<[], [EVM2EVMOnRamp.DynamicConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getExpectedNextSequenceNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [destChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeTokenConfig"
  ): TypedContractMethod<
    [token: AddressLike],
    [EVM2EVMOnRamp.FeeTokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNopFeesJuels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNops"
  ): TypedContractMethod<
    [],
    [
      [EVM2EVMOnRamp.NopAndWeightStructOutput[], bigint] & {
        nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStructOutput[];
        weightsTotal: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolBySourceToken"
  ): TypedContractMethod<
    [arg0: BigNumberish, sourceToken: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSenderNonce"
  ): TypedContractMethod<[sender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStaticConfig"
  ): TypedContractMethod<[], [EVM2EVMOnRamp.StaticConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTokenLimitAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenTransferFeeConfig"
  ): TypedContractMethod<
    [token: AddressLike],
    [EVM2EVMOnRamp.TokenTransferFeeConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "linkAvailableForPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payNops"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDynamicConfig"
  ): TypedContractMethod<
    [dynamicConfig: EVM2EVMOnRamp.DynamicConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeTokenConfig"
  ): TypedContractMethod<
    [feeTokenConfigArgs: EVM2EVMOnRamp.FeeTokenConfigArgsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNops"
  ): TypedContractMethod<
    [nopsAndWeights: EVM2EVMOnRamp.NopAndWeightStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRateLimiterConfig"
  ): TypedContractMethod<
    [config: RateLimiter.ConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenTransferFeeConfig"
  ): TypedContractMethod<
    [
      tokenTransferFeeConfigArgs: EVM2EVMOnRamp.TokenTransferFeeConfigArgsStruct[],
      tokensToUseDefaultFeeConfigs: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawNonLinkFees"
  ): TypedContractMethod<
    [feeToken: AddressLike, to: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "CCIPSendRequested"
  ): TypedContractEvent<
    CCIPSendRequestedEvent.InputTuple,
    CCIPSendRequestedEvent.OutputTuple,
    CCIPSendRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigChanged"
  ): TypedContractEvent<
    ConfigChangedEvent.InputTuple,
    ConfigChangedEvent.OutputTuple,
    ConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeConfigSet"
  ): TypedContractEvent<
    FeeConfigSetEvent.InputTuple,
    FeeConfigSetEvent.OutputTuple,
    FeeConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "NopPaid"
  ): TypedContractEvent<
    NopPaidEvent.InputTuple,
    NopPaidEvent.OutputTuple,
    NopPaidEvent.OutputObject
  >;
  getEvent(
    key: "NopsSet"
  ): TypedContractEvent<
    NopsSetEvent.InputTuple,
    NopsSetEvent.OutputTuple,
    NopsSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransferFeeConfigDeleted"
  ): TypedContractEvent<
    TokenTransferFeeConfigDeletedEvent.InputTuple,
    TokenTransferFeeConfigDeletedEvent.OutputTuple,
    TokenTransferFeeConfigDeletedEvent.OutputObject
  >;
  getEvent(
    key: "TokenTransferFeeConfigSet"
  ): TypedContractEvent<
    TokenTransferFeeConfigSetEvent.InputTuple,
    TokenTransferFeeConfigSetEvent.OutputTuple,
    TokenTransferFeeConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "TokensConsumed"
  ): TypedContractEvent<
    TokensConsumedEvent.InputTuple,
    TokensConsumedEvent.OutputTuple,
    TokensConsumedEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "CCIPSendRequested(tuple)": TypedContractEvent<
      CCIPSendRequestedEvent.InputTuple,
      CCIPSendRequestedEvent.OutputTuple,
      CCIPSendRequestedEvent.OutputObject
    >;
    CCIPSendRequested: TypedContractEvent<
      CCIPSendRequestedEvent.InputTuple,
      CCIPSendRequestedEvent.OutputTuple,
      CCIPSendRequestedEvent.OutputObject
    >;

    "ConfigChanged(tuple)": TypedContractEvent<
      ConfigChangedEvent.InputTuple,
      ConfigChangedEvent.OutputTuple,
      ConfigChangedEvent.OutputObject
    >;
    ConfigChanged: TypedContractEvent<
      ConfigChangedEvent.InputTuple,
      ConfigChangedEvent.OutputTuple,
      ConfigChangedEvent.OutputObject
    >;

    "ConfigSet(tuple,tuple)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "FeeConfigSet(tuple[])": TypedContractEvent<
      FeeConfigSetEvent.InputTuple,
      FeeConfigSetEvent.OutputTuple,
      FeeConfigSetEvent.OutputObject
    >;
    FeeConfigSet: TypedContractEvent<
      FeeConfigSetEvent.InputTuple,
      FeeConfigSetEvent.OutputTuple,
      FeeConfigSetEvent.OutputObject
    >;

    "NopPaid(address,uint256)": TypedContractEvent<
      NopPaidEvent.InputTuple,
      NopPaidEvent.OutputTuple,
      NopPaidEvent.OutputObject
    >;
    NopPaid: TypedContractEvent<
      NopPaidEvent.InputTuple,
      NopPaidEvent.OutputTuple,
      NopPaidEvent.OutputObject
    >;

    "NopsSet(uint256,tuple[])": TypedContractEvent<
      NopsSetEvent.InputTuple,
      NopsSetEvent.OutputTuple,
      NopsSetEvent.OutputObject
    >;
    NopsSet: TypedContractEvent<
      NopsSetEvent.InputTuple,
      NopsSetEvent.OutputTuple,
      NopsSetEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenTransferFeeConfigDeleted(address[])": TypedContractEvent<
      TokenTransferFeeConfigDeletedEvent.InputTuple,
      TokenTransferFeeConfigDeletedEvent.OutputTuple,
      TokenTransferFeeConfigDeletedEvent.OutputObject
    >;
    TokenTransferFeeConfigDeleted: TypedContractEvent<
      TokenTransferFeeConfigDeletedEvent.InputTuple,
      TokenTransferFeeConfigDeletedEvent.OutputTuple,
      TokenTransferFeeConfigDeletedEvent.OutputObject
    >;

    "TokenTransferFeeConfigSet(tuple[])": TypedContractEvent<
      TokenTransferFeeConfigSetEvent.InputTuple,
      TokenTransferFeeConfigSetEvent.OutputTuple,
      TokenTransferFeeConfigSetEvent.OutputObject
    >;
    TokenTransferFeeConfigSet: TypedContractEvent<
      TokenTransferFeeConfigSetEvent.InputTuple,
      TokenTransferFeeConfigSetEvent.OutputTuple,
      TokenTransferFeeConfigSetEvent.OutputObject
    >;

    "TokensConsumed(uint256)": TypedContractEvent<
      TokensConsumedEvent.InputTuple,
      TokensConsumedEvent.OutputTuple,
      TokensConsumedEvent.OutputObject
    >;
    TokensConsumed: TypedContractEvent<
      TokensConsumedEvent.InputTuple,
      TokensConsumedEvent.OutputTuple,
      TokensConsumedEvent.OutputObject
    >;
  };
}
