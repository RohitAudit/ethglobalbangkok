/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EVM2EVMOffRamp {
  export type StaticConfigStruct = {
    commitStore: AddressLike;
    chainSelector: BigNumberish;
    sourceChainSelector: BigNumberish;
    onRamp: AddressLike;
    prevOffRamp: AddressLike;
    rmnProxy: AddressLike;
    tokenAdminRegistry: AddressLike;
  };

  export type StaticConfigStructOutput = [
    commitStore: string,
    chainSelector: bigint,
    sourceChainSelector: bigint,
    onRamp: string,
    prevOffRamp: string,
    rmnProxy: string,
    tokenAdminRegistry: string
  ] & {
    commitStore: string;
    chainSelector: bigint;
    sourceChainSelector: bigint;
    onRamp: string;
    prevOffRamp: string;
    rmnProxy: string;
    tokenAdminRegistry: string;
  };

  export type DynamicConfigStruct = {
    permissionLessExecutionThresholdSeconds: BigNumberish;
    maxDataBytes: BigNumberish;
    maxNumberOfTokensPerMsg: BigNumberish;
    router: AddressLike;
    priceRegistry: AddressLike;
  };

  export type DynamicConfigStructOutput = [
    permissionLessExecutionThresholdSeconds: bigint,
    maxDataBytes: bigint,
    maxNumberOfTokensPerMsg: bigint,
    router: string,
    priceRegistry: string
  ] & {
    permissionLessExecutionThresholdSeconds: bigint;
    maxDataBytes: bigint;
    maxNumberOfTokensPerMsg: bigint;
    router: string;
    priceRegistry: string;
  };

  export type GasLimitOverrideStruct = {
    receiverExecutionGasLimit: BigNumberish;
    tokenGasOverrides: BigNumberish[];
  };

  export type GasLimitOverrideStructOutput = [
    receiverExecutionGasLimit: bigint,
    tokenGasOverrides: bigint[]
  ] & { receiverExecutionGasLimit: bigint; tokenGasOverrides: bigint[] };

  export type RateLimitTokenStruct = {
    sourceToken: AddressLike;
    destToken: AddressLike;
  };

  export type RateLimitTokenStructOutput = [
    sourceToken: string,
    destToken: string
  ] & { sourceToken: string; destToken: string };
}

export declare namespace RateLimiter {
  export type ConfigStruct = {
    isEnabled: boolean;
    capacity: BigNumberish;
    rate: BigNumberish;
  };

  export type ConfigStructOutput = [
    isEnabled: boolean,
    capacity: bigint,
    rate: bigint
  ] & { isEnabled: boolean; capacity: bigint; rate: bigint };

  export type TokenBucketStruct = {
    tokens: BigNumberish;
    lastUpdated: BigNumberish;
    isEnabled: boolean;
    capacity: BigNumberish;
    rate: BigNumberish;
  };

  export type TokenBucketStructOutput = [
    tokens: bigint,
    lastUpdated: bigint,
    isEnabled: boolean,
    capacity: bigint,
    rate: bigint
  ] & {
    tokens: bigint;
    lastUpdated: bigint;
    isEnabled: boolean;
    capacity: bigint;
    rate: bigint;
  };
}

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type Any2EVMMessageStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    sender: BytesLike;
    data: BytesLike;
    destTokenAmounts: Client.EVMTokenAmountStruct[];
  };

  export type Any2EVMMessageStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    sender: string,
    data: string,
    destTokenAmounts: Client.EVMTokenAmountStructOutput[]
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    sender: string;
    data: string;
    destTokenAmounts: Client.EVMTokenAmountStructOutput[];
  };
}

export declare namespace Internal {
  export type EVM2EVMMessageStruct = {
    sourceChainSelector: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    sequenceNumber: BigNumberish;
    gasLimit: BigNumberish;
    strict: boolean;
    nonce: BigNumberish;
    feeToken: AddressLike;
    feeTokenAmount: BigNumberish;
    data: BytesLike;
    tokenAmounts: Client.EVMTokenAmountStruct[];
    sourceTokenData: BytesLike[];
    messageId: BytesLike;
  };

  export type EVM2EVMMessageStructOutput = [
    sourceChainSelector: bigint,
    sender: string,
    receiver: string,
    sequenceNumber: bigint,
    gasLimit: bigint,
    strict: boolean,
    nonce: bigint,
    feeToken: string,
    feeTokenAmount: bigint,
    data: string,
    tokenAmounts: Client.EVMTokenAmountStructOutput[],
    sourceTokenData: string[],
    messageId: string
  ] & {
    sourceChainSelector: bigint;
    sender: string;
    receiver: string;
    sequenceNumber: bigint;
    gasLimit: bigint;
    strict: boolean;
    nonce: bigint;
    feeToken: string;
    feeTokenAmount: bigint;
    data: string;
    tokenAmounts: Client.EVMTokenAmountStructOutput[];
    sourceTokenData: string[];
    messageId: string;
  };

  export type ExecutionReportStruct = {
    messages: Internal.EVM2EVMMessageStruct[];
    offchainTokenData: BytesLike[][];
    proofs: BytesLike[];
    proofFlagBits: BigNumberish;
  };

  export type ExecutionReportStructOutput = [
    messages: Internal.EVM2EVMMessageStructOutput[],
    offchainTokenData: string[][],
    proofs: string[],
    proofFlagBits: bigint
  ] & {
    messages: Internal.EVM2EVMMessageStructOutput[];
    offchainTokenData: string[][];
    proofs: string[];
    proofFlagBits: bigint;
  };
}

export interface OffRampInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "ccipReceive"
      | "currentRateLimiterState"
      | "executeSingleMessage"
      | "getAllRateLimitTokens"
      | "getDynamicConfig"
      | "getExecutionState"
      | "getSenderNonce"
      | "getStaticConfig"
      | "getTokenLimitAdmin"
      | "getTransmitters"
      | "latestConfigDetails"
      | "latestConfigDigestAndEpoch"
      | "manuallyExecute"
      | "owner"
      | "setAdmin"
      | "setOCR2Config"
      | "setRateLimiterConfig"
      | "transferOwnership"
      | "transmit"
      | "typeAndVersion"
      | "updateRateLimitTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSet"
      | "AlreadyAttempted"
      | "ConfigChanged"
      | "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)"
      | "ConfigSet(tuple,tuple)"
      | "ExecutionStateChanged"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "SkippedAlreadyExecutedMessage"
      | "SkippedIncorrectNonce"
      | "SkippedSenderWithPreviousRampMessageInflight"
      | "TokenAggregateRateLimitAdded"
      | "TokenAggregateRateLimitRemoved"
      | "TokensConsumed"
      | "Transmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccipReceive",
    values: [Client.Any2EVMMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRateLimiterState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeSingleMessage",
    values: [Internal.EVM2EVMMessageStruct, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRateLimitTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenLimitAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransmitters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDigestAndEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manuallyExecute",
    values: [
      Internal.ExecutionReportStruct,
      EVM2EVMOffRamp.GasLimitOverrideStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOCR2Config",
    values: [
      AddressLike[],
      AddressLike[],
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateLimiterConfig",
    values: [RateLimiter.ConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transmit",
    values: [
      [BytesLike, BytesLike, BytesLike],
      BytesLike,
      BytesLike[],
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRateLimitTokens",
    values: [
      EVM2EVMOffRamp.RateLimitTokenStruct[],
      EVM2EVMOffRamp.RateLimitTokenStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ccipReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRateLimiterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSingleMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRateLimitTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSenderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenLimitAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDigestAndEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manuallyExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOCR2Config",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateLimiterConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRateLimitTokens",
    data: BytesLike
  ): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlreadyAttemptedEvent {
  export type InputTuple = [sequenceNumber: BigNumberish];
  export type OutputTuple = [sequenceNumber: bigint];
  export interface OutputObject {
    sequenceNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigChangedEvent {
  export type InputTuple = [config: RateLimiter.ConfigStruct];
  export type OutputTuple = [config: RateLimiter.ConfigStructOutput];
  export interface OutputObject {
    config: RateLimiter.ConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event {
  export type InputTuple = [
    previousConfigBlockNumber: BigNumberish,
    configDigest: BytesLike,
    configCount: BigNumberish,
    signers: AddressLike[],
    transmitters: AddressLike[],
    f: BigNumberish,
    onchainConfig: BytesLike,
    offchainConfigVersion: BigNumberish,
    offchainConfig: BytesLike
  ];
  export type OutputTuple = [
    previousConfigBlockNumber: bigint,
    configDigest: string,
    configCount: bigint,
    signers: string[],
    transmitters: string[],
    f: bigint,
    onchainConfig: string,
    offchainConfigVersion: bigint,
    offchainConfig: string
  ];
  export interface OutputObject {
    previousConfigBlockNumber: bigint;
    configDigest: string;
    configCount: bigint;
    signers: string[];
    transmitters: string[];
    f: bigint;
    onchainConfig: string;
    offchainConfigVersion: bigint;
    offchainConfig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSet_tuple_tuple_Event {
  export type InputTuple = [
    staticConfig: EVM2EVMOffRamp.StaticConfigStruct,
    dynamicConfig: EVM2EVMOffRamp.DynamicConfigStruct
  ];
  export type OutputTuple = [
    staticConfig: EVM2EVMOffRamp.StaticConfigStructOutput,
    dynamicConfig: EVM2EVMOffRamp.DynamicConfigStructOutput
  ];
  export interface OutputObject {
    staticConfig: EVM2EVMOffRamp.StaticConfigStructOutput;
    dynamicConfig: EVM2EVMOffRamp.DynamicConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionStateChangedEvent {
  export type InputTuple = [
    sequenceNumber: BigNumberish,
    messageId: BytesLike,
    state: BigNumberish,
    returnData: BytesLike
  ];
  export type OutputTuple = [
    sequenceNumber: bigint,
    messageId: string,
    state: bigint,
    returnData: string
  ];
  export interface OutputObject {
    sequenceNumber: bigint;
    messageId: string;
    state: bigint;
    returnData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SkippedAlreadyExecutedMessageEvent {
  export type InputTuple = [sequenceNumber: BigNumberish];
  export type OutputTuple = [sequenceNumber: bigint];
  export interface OutputObject {
    sequenceNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SkippedIncorrectNonceEvent {
  export type InputTuple = [nonce: BigNumberish, sender: AddressLike];
  export type OutputTuple = [nonce: bigint, sender: string];
  export interface OutputObject {
    nonce: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SkippedSenderWithPreviousRampMessageInflightEvent {
  export type InputTuple = [nonce: BigNumberish, sender: AddressLike];
  export type OutputTuple = [nonce: bigint, sender: string];
  export interface OutputObject {
    nonce: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAggregateRateLimitAddedEvent {
  export type InputTuple = [sourceToken: AddressLike, destToken: AddressLike];
  export type OutputTuple = [sourceToken: string, destToken: string];
  export interface OutputObject {
    sourceToken: string;
    destToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAggregateRateLimitRemovedEvent {
  export type InputTuple = [sourceToken: AddressLike, destToken: AddressLike];
  export type OutputTuple = [sourceToken: string, destToken: string];
  export interface OutputObject {
    sourceToken: string;
    destToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensConsumedEvent {
  export type InputTuple = [tokens: BigNumberish];
  export type OutputTuple = [tokens: bigint];
  export interface OutputObject {
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransmittedEvent {
  export type InputTuple = [configDigest: BytesLike, epoch: BigNumberish];
  export type OutputTuple = [configDigest: string, epoch: bigint];
  export interface OutputObject {
    configDigest: string;
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OffRamp extends BaseContract {
  connect(runner?: ContractRunner | null): OffRamp;
  waitForDeployment(): Promise<this>;

  interface: OffRampInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  ccipReceive: TypedContractMethod<
    [arg0: Client.Any2EVMMessageStruct],
    [void],
    "view"
  >;

  currentRateLimiterState: TypedContractMethod<
    [],
    [RateLimiter.TokenBucketStructOutput],
    "view"
  >;

  executeSingleMessage: TypedContractMethod<
    [
      message: Internal.EVM2EVMMessageStruct,
      offchainTokenData: BytesLike[],
      tokenGasOverrides: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getAllRateLimitTokens: TypedContractMethod<
    [],
    [[string[], string[]] & { sourceTokens: string[]; destTokens: string[] }],
    "view"
  >;

  getDynamicConfig: TypedContractMethod<
    [],
    [EVM2EVMOffRamp.DynamicConfigStructOutput],
    "view"
  >;

  getExecutionState: TypedContractMethod<
    [sequenceNumber: BigNumberish],
    [bigint],
    "view"
  >;

  getSenderNonce: TypedContractMethod<[sender: AddressLike], [bigint], "view">;

  getStaticConfig: TypedContractMethod<
    [],
    [EVM2EVMOffRamp.StaticConfigStructOutput],
    "view"
  >;

  getTokenLimitAdmin: TypedContractMethod<[], [string], "view">;

  getTransmitters: TypedContractMethod<[], [string[]], "view">;

  latestConfigDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;

  latestConfigDigestAndEpoch: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: bigint;
      }
    ],
    "view"
  >;

  manuallyExecute: TypedContractMethod<
    [
      report: Internal.ExecutionReportStruct,
      gasLimitOverrides: EVM2EVMOffRamp.GasLimitOverrideStruct[]
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  setOCR2Config: TypedContractMethod<
    [
      signers: AddressLike[],
      transmitters: AddressLike[],
      f: BigNumberish,
      onchainConfig: BytesLike,
      offchainConfigVersion: BigNumberish,
      offchainConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setRateLimiterConfig: TypedContractMethod<
    [config: RateLimiter.ConfigStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  transmit: TypedContractMethod<
    [
      reportContext: [BytesLike, BytesLike, BytesLike],
      report: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      arg4: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  updateRateLimitTokens: TypedContractMethod<
    [
      removes: EVM2EVMOffRamp.RateLimitTokenStruct[],
      adds: EVM2EVMOffRamp.RateLimitTokenStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ccipReceive"
  ): TypedContractMethod<[arg0: Client.Any2EVMMessageStruct], [void], "view">;
  getFunction(
    nameOrSignature: "currentRateLimiterState"
  ): TypedContractMethod<[], [RateLimiter.TokenBucketStructOutput], "view">;
  getFunction(
    nameOrSignature: "executeSingleMessage"
  ): TypedContractMethod<
    [
      message: Internal.EVM2EVMMessageStruct,
      offchainTokenData: BytesLike[],
      tokenGasOverrides: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllRateLimitTokens"
  ): TypedContractMethod<
    [],
    [[string[], string[]] & { sourceTokens: string[]; destTokens: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDynamicConfig"
  ): TypedContractMethod<
    [],
    [EVM2EVMOffRamp.DynamicConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExecutionState"
  ): TypedContractMethod<[sequenceNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSenderNonce"
  ): TypedContractMethod<[sender: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStaticConfig"
  ): TypedContractMethod<[], [EVM2EVMOffRamp.StaticConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getTokenLimitAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTransmitters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "latestConfigDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestConfigDigestAndEpoch"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        scanLogs: boolean;
        configDigest: string;
        epoch: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "manuallyExecute"
  ): TypedContractMethod<
    [
      report: Internal.ExecutionReportStruct,
      gasLimitOverrides: EVM2EVMOffRamp.GasLimitOverrideStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOCR2Config"
  ): TypedContractMethod<
    [
      signers: AddressLike[],
      transmitters: AddressLike[],
      f: BigNumberish,
      onchainConfig: BytesLike,
      offchainConfigVersion: BigNumberish,
      offchainConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRateLimiterConfig"
  ): TypedContractMethod<
    [config: RateLimiter.ConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transmit"
  ): TypedContractMethod<
    [
      reportContext: [BytesLike, BytesLike, BytesLike],
      report: BytesLike,
      rs: BytesLike[],
      ss: BytesLike[],
      arg4: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateRateLimitTokens"
  ): TypedContractMethod<
    [
      removes: EVM2EVMOffRamp.RateLimitTokenStruct[],
      adds: EVM2EVMOffRamp.RateLimitTokenStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "AlreadyAttempted"
  ): TypedContractEvent<
    AlreadyAttemptedEvent.InputTuple,
    AlreadyAttemptedEvent.OutputTuple,
    AlreadyAttemptedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigChanged"
  ): TypedContractEvent<
    ConfigChangedEvent.InputTuple,
    ConfigChangedEvent.OutputTuple,
    ConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)"
  ): TypedContractEvent<
    ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event.InputTuple,
    ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event.OutputTuple,
    ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event.OutputObject
  >;
  getEvent(
    key: "ConfigSet(tuple,tuple)"
  ): TypedContractEvent<
    ConfigSet_tuple_tuple_Event.InputTuple,
    ConfigSet_tuple_tuple_Event.OutputTuple,
    ConfigSet_tuple_tuple_Event.OutputObject
  >;
  getEvent(
    key: "ExecutionStateChanged"
  ): TypedContractEvent<
    ExecutionStateChangedEvent.InputTuple,
    ExecutionStateChangedEvent.OutputTuple,
    ExecutionStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SkippedAlreadyExecutedMessage"
  ): TypedContractEvent<
    SkippedAlreadyExecutedMessageEvent.InputTuple,
    SkippedAlreadyExecutedMessageEvent.OutputTuple,
    SkippedAlreadyExecutedMessageEvent.OutputObject
  >;
  getEvent(
    key: "SkippedIncorrectNonce"
  ): TypedContractEvent<
    SkippedIncorrectNonceEvent.InputTuple,
    SkippedIncorrectNonceEvent.OutputTuple,
    SkippedIncorrectNonceEvent.OutputObject
  >;
  getEvent(
    key: "SkippedSenderWithPreviousRampMessageInflight"
  ): TypedContractEvent<
    SkippedSenderWithPreviousRampMessageInflightEvent.InputTuple,
    SkippedSenderWithPreviousRampMessageInflightEvent.OutputTuple,
    SkippedSenderWithPreviousRampMessageInflightEvent.OutputObject
  >;
  getEvent(
    key: "TokenAggregateRateLimitAdded"
  ): TypedContractEvent<
    TokenAggregateRateLimitAddedEvent.InputTuple,
    TokenAggregateRateLimitAddedEvent.OutputTuple,
    TokenAggregateRateLimitAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAggregateRateLimitRemoved"
  ): TypedContractEvent<
    TokenAggregateRateLimitRemovedEvent.InputTuple,
    TokenAggregateRateLimitRemovedEvent.OutputTuple,
    TokenAggregateRateLimitRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokensConsumed"
  ): TypedContractEvent<
    TokensConsumedEvent.InputTuple,
    TokensConsumedEvent.OutputTuple,
    TokensConsumedEvent.OutputObject
  >;
  getEvent(
    key: "Transmitted"
  ): TypedContractEvent<
    TransmittedEvent.InputTuple,
    TransmittedEvent.OutputTuple,
    TransmittedEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "AlreadyAttempted(uint64)": TypedContractEvent<
      AlreadyAttemptedEvent.InputTuple,
      AlreadyAttemptedEvent.OutputTuple,
      AlreadyAttemptedEvent.OutputObject
    >;
    AlreadyAttempted: TypedContractEvent<
      AlreadyAttemptedEvent.InputTuple,
      AlreadyAttemptedEvent.OutputTuple,
      AlreadyAttemptedEvent.OutputObject
    >;

    "ConfigChanged(tuple)": TypedContractEvent<
      ConfigChangedEvent.InputTuple,
      ConfigChangedEvent.OutputTuple,
      ConfigChangedEvent.OutputObject
    >;
    ConfigChanged: TypedContractEvent<
      ConfigChangedEvent.InputTuple,
      ConfigChangedEvent.OutputTuple,
      ConfigChangedEvent.OutputObject
    >;

    "ConfigSet(uint32,bytes32,uint64,address[],address[],uint8,bytes,uint64,bytes)": TypedContractEvent<
      ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event.InputTuple,
      ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event.OutputTuple,
      ConfigSet_uint32_bytes32_uint64_address_array_address_array_uint8_bytes_uint64_bytes_Event.OutputObject
    >;
    "ConfigSet(tuple,tuple)": TypedContractEvent<
      ConfigSet_tuple_tuple_Event.InputTuple,
      ConfigSet_tuple_tuple_Event.OutputTuple,
      ConfigSet_tuple_tuple_Event.OutputObject
    >;

    "ExecutionStateChanged(uint64,bytes32,uint8,bytes)": TypedContractEvent<
      ExecutionStateChangedEvent.InputTuple,
      ExecutionStateChangedEvent.OutputTuple,
      ExecutionStateChangedEvent.OutputObject
    >;
    ExecutionStateChanged: TypedContractEvent<
      ExecutionStateChangedEvent.InputTuple,
      ExecutionStateChangedEvent.OutputTuple,
      ExecutionStateChangedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SkippedAlreadyExecutedMessage(uint64)": TypedContractEvent<
      SkippedAlreadyExecutedMessageEvent.InputTuple,
      SkippedAlreadyExecutedMessageEvent.OutputTuple,
      SkippedAlreadyExecutedMessageEvent.OutputObject
    >;
    SkippedAlreadyExecutedMessage: TypedContractEvent<
      SkippedAlreadyExecutedMessageEvent.InputTuple,
      SkippedAlreadyExecutedMessageEvent.OutputTuple,
      SkippedAlreadyExecutedMessageEvent.OutputObject
    >;

    "SkippedIncorrectNonce(uint64,address)": TypedContractEvent<
      SkippedIncorrectNonceEvent.InputTuple,
      SkippedIncorrectNonceEvent.OutputTuple,
      SkippedIncorrectNonceEvent.OutputObject
    >;
    SkippedIncorrectNonce: TypedContractEvent<
      SkippedIncorrectNonceEvent.InputTuple,
      SkippedIncorrectNonceEvent.OutputTuple,
      SkippedIncorrectNonceEvent.OutputObject
    >;

    "SkippedSenderWithPreviousRampMessageInflight(uint64,address)": TypedContractEvent<
      SkippedSenderWithPreviousRampMessageInflightEvent.InputTuple,
      SkippedSenderWithPreviousRampMessageInflightEvent.OutputTuple,
      SkippedSenderWithPreviousRampMessageInflightEvent.OutputObject
    >;
    SkippedSenderWithPreviousRampMessageInflight: TypedContractEvent<
      SkippedSenderWithPreviousRampMessageInflightEvent.InputTuple,
      SkippedSenderWithPreviousRampMessageInflightEvent.OutputTuple,
      SkippedSenderWithPreviousRampMessageInflightEvent.OutputObject
    >;

    "TokenAggregateRateLimitAdded(address,address)": TypedContractEvent<
      TokenAggregateRateLimitAddedEvent.InputTuple,
      TokenAggregateRateLimitAddedEvent.OutputTuple,
      TokenAggregateRateLimitAddedEvent.OutputObject
    >;
    TokenAggregateRateLimitAdded: TypedContractEvent<
      TokenAggregateRateLimitAddedEvent.InputTuple,
      TokenAggregateRateLimitAddedEvent.OutputTuple,
      TokenAggregateRateLimitAddedEvent.OutputObject
    >;

    "TokenAggregateRateLimitRemoved(address,address)": TypedContractEvent<
      TokenAggregateRateLimitRemovedEvent.InputTuple,
      TokenAggregateRateLimitRemovedEvent.OutputTuple,
      TokenAggregateRateLimitRemovedEvent.OutputObject
    >;
    TokenAggregateRateLimitRemoved: TypedContractEvent<
      TokenAggregateRateLimitRemovedEvent.InputTuple,
      TokenAggregateRateLimitRemovedEvent.OutputTuple,
      TokenAggregateRateLimitRemovedEvent.OutputObject
    >;

    "TokensConsumed(uint256)": TypedContractEvent<
      TokensConsumedEvent.InputTuple,
      TokensConsumedEvent.OutputTuple,
      TokensConsumedEvent.OutputObject
    >;
    TokensConsumed: TypedContractEvent<
      TokensConsumedEvent.InputTuple,
      TokensConsumedEvent.OutputTuple,
      TokensConsumedEvent.OutputObject
    >;

    "Transmitted(bytes32,uint32)": TypedContractEvent<
      TransmittedEvent.InputTuple,
      TransmittedEvent.OutputTuple,
      TransmittedEvent.OutputObject
    >;
    Transmitted: TypedContractEvent<
      TransmittedEvent.InputTuple,
      TransmittedEvent.OutputTuple,
      TransmittedEvent.OutputObject
    >;
  };
}
